{"ast":null,"code":"var _jsxFileName = \"/Users/chelseaee/WebDev/billboard-tech/scrappy/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Nav from './components/Nav';\nimport moment from 'moment';\nimport Options from './components/Options';\nimport MainData from './components/MainData';\nimport SupportedHeader from './components/SupportedHeader';\nimport Paginator from './components/Paginator';\n\nconst App = () => {\n  const [jobs, setJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [failure, setFailure] = useState(false);\n  const [lastUpdate, setLastUpdate] = useState({});\n  const [stack, setStack] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sort, setSort] = useState(\"default\");\n  const [pagination, setPagination] = useState({});\n  const [company, setCompany] = useState(null);\n  const [queries, setQueries] = useState(null);\n  useEffect(() => {\n    let stackUrlString;\n\n    if (queries && queries.length > 0) {\n      stackUrlString = `&stack=${queries.join(\"&stack=\")}`;\n    }\n\n    let companyUrlString = \"\";\n\n    if (company) {\n      companyUrlString = `&company=${company}`;\n    }\n\n    axios.get(`/jobs`).then(res => {\n      console.log(res.data);\n      setJobs(res.data.results);\n      setPagination({\n        count: res.data.results.count,\n        next: res.data.results.next,\n        prev: res.data.results.previous\n      });\n      setLastUpdate(prev => {\n        return { ...prev,\n          jobs: res.data.results[0].created_at\n        };\n      });\n      setLoading(false);\n    }).catch(err => {\n      setLoading(false);\n      setFailure(true);\n      console.log(`Error in axios request`, err);\n    });\n    axios.get(\"/tech\").then(res => {\n      setStack(res.data);\n      setLastUpdate(prev => {\n        return { ...prev,\n          tech: res.data[res.data.length - 1].created_at\n        };\n      });\n    }).catch(err => {\n      console.log(`Error in axios request for tech`, err);\n    });\n  }, []);\n  useEffect(() => {\n    console.log(jobs);\n    console.log(stack);\n    console.log(lastUpdate);\n  }, [jobs, stack, lastUpdate]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Options, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SupportedHeader, {\n    lastUpdate: moment(lastUpdate.tech).format(\"DD MMMM YYYY\"),\n    stack: stack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Paginator, {\n    current: currentPage,\n    info: pagination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MainData, {\n    loading: loading,\n    failure: failure,\n    lastUpdate: moment(lastUpdate.jobs).format(\"DD MMM, h:mm:ss a\"),\n    data: jobs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/chelseaee/WebDev/billboard-tech/scrappy/src/App.js"],"names":["React","useState","useEffect","axios","Nav","moment","Options","MainData","SupportedHeader","Paginator","App","jobs","setJobs","loading","setLoading","failure","setFailure","lastUpdate","setLastUpdate","stack","setStack","currentPage","setCurrentPage","sort","setSort","pagination","setPagination","company","setCompany","queries","setQueries","stackUrlString","length","join","companyUrlString","get","then","res","console","log","data","results","count","next","prev","previous","created_at","catch","err","tech","format"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Nav from './components/Nav'\nimport moment from 'moment'\nimport Options from './components/Options'\nimport MainData from './components/MainData'\nimport SupportedHeader from './components/SupportedHeader'\nimport Paginator from './components/Paginator'\n\nconst App = () => {\n    const [jobs, setJobs] = useState([]);\n    const [loading, setLoading] = useState(true)\n    const [failure, setFailure] = useState(false)\n    const [lastUpdate, setLastUpdate] = useState({})\n    const [stack, setStack] = useState([])\n    const [currentPage, setCurrentPage] = useState(1)\n    const [sort, setSort] = useState(\"default\")\n    const [pagination, setPagination] = useState({})\n    const [company, setCompany] = useState(null)\n    const [queries, setQueries] = useState(null)\n\n    useEffect(() => {\n      let stackUrlString;\n      if (queries && queries.length > 0) {\n        stackUrlString = `&stack=${queries.join(\"&stack=\")}`\n      }\n      let companyUrlString = \"\"\n      if (company) {\n        companyUrlString = `&company=${company}`\n      }\n        axios.get(`/jobs`)\n        .then((res) => {\n            console.log(res.data)\n            setJobs(res.data.results);\n            setPagination({\n              count: res.data.results.count,\n              next: res.data.results.next,\n              prev: res.data.results.previous,\n            })\n            setLastUpdate((prev) => {\n              return {\n                ...prev,\n                jobs: res.data.results[0].created_at\n              };\n            });\n            setLoading(false)\n        })\n        .catch((err) => {\n          setLoading(false)\n          setFailure(true)\n          console.log(`Error in axios request`, err)\n        })\n\n        axios.get(\"/tech\")\n        .then((res) => {\n            setStack(res.data)\n            setLastUpdate(prev => {\n              return {...prev, tech: res.data[res.data.length-1].created_at}\n            })\n        })\n        .catch((err) => {\n          console.log(`Error in axios request for tech`, err)\n        })\n    }, []);\n\n    useEffect(()=> {\n        console.log(jobs)\n        console.log(stack)\n        console.log(lastUpdate)\n    }, [jobs, stack, lastUpdate])\n\n    return (\n      <div>\n        <Nav />\n        <div className=\"container\">\n          <Options />\n\n          <SupportedHeader\n            lastUpdate={moment(lastUpdate.tech).format(\"DD MMMM YYYY\")}\n            stack={stack}\n          />\n          <Paginator current={currentPage} info={pagination} />\n\n          <MainData\n            loading={loading}\n            failure={failure}\n            lastUpdate={moment(lastUpdate.jobs).format(\"DD MMM, h:mm:ss a\")}\n            data={jobs}\n          />\n        </div>\n      </div>\n    );\n\n};\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}